export interface CodegenOptions {
    /**
     * The original file content to update
     */
    base: string;
    /**
     * Unique identifier for the codegen block (e.g., "watsonx-settings-models")
     */
    id: string;
    /**
     * Comment syntax type: 'js' for // comments or 'html' for <!-- ... --> comments
     */
    markerType: 'js' | 'html';
    /**
     * Description to include in the autogenerated header
     */
    description?: string;
    /**
     * Lines of content to place inside the autogenerated block
     */
    content: string[];
    /**
     * String to append after the block (e.g., newline)
     */
    append?: string;
  }
  
  export function createCodegen(options: CodegenOptions): string {
    const { base, id, markerType, description, content, append = '' } = options;
  
    // Determine comment syntax
    let openMarker: string;
    let closeMarker: string;
    let commentStart: string;
    let commentEnd: string;
  
    if (markerType === 'js') {
      commentStart = '//';
      commentEnd = '';
      openMarker = `${commentStart} <autogen ${id}>`;
      closeMarker = `${commentStart} </autogen ${id}>`;
    } else {
      commentStart = '<!--';
      commentEnd = ' -->';
      openMarker = `${commentStart} <autogen ${id}>${commentEnd}`;
      closeMarker = `${commentStart} </autogen ${id}>${commentEnd}`;
    }
  
    // Helper to escape markers for regex
    const escapeForRegex = (str: string) => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const escapedOpen = escapeForRegex(openMarker);
    const escapedClose = escapeForRegex(closeMarker);
  
    // Build autogenerated header
    const headerLines = [
      `⚠️ WARNING: This section that is marked by the autogen ID of ${id} (top and bottom) is auto-generated.`,
      'Do not edit manually.',
      `Generated on: ${new Date().toISOString()}`,
      description ? `Description: ${description}` : ''
    ].filter(Boolean).map(line => `${commentStart} ${line}${commentEnd}`);
  
    // Compose the new autogenerated block
    const blockLines = [openMarker, ...headerLines, '', ...content, closeMarker];
    const generatedBlock = blockLines.join('\n') + (append || '');
  
    // Regex to find existing autogen block
    const autogenRegex = new RegExp(`${escapedOpen}[\\s\\S]*?${escapedClose}\\n?`, 'gm');
  
    // Seed marker (single tag) to replace if present
    const seedOpen = markerType === 'js'
      ? `// <seed ${id}>`
      : `<!-- <seed ${id}> -->`;
  
    // Replace existing autogen, or seed, or append if none found
    if (autogenRegex.test(base)) {
      return base.replace(autogenRegex, generatedBlock);
    } else if (base.includes(seedOpen)) {
      return base.replace(seedOpen, generatedBlock);
    } else {
      return base + '\n' + generatedBlock;
    }
  }
  